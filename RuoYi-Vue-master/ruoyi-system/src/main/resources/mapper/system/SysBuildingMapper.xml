<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.SysBuildingMapper">
    
    <resultMap type="SysBuilding" id="SysBuildingResult">
        <result property="buildingId"    column="building_id"    />
        <result property="buildingName"    column="building_name"    />
        <result property="status"    column="status"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateTime"    column="update_time"    />
        <result property="remark"    column="remark"    />
    </resultMap>

    <resultMap id="SysBuildingSysApartmentResult" type="SysBuilding" extends="SysBuildingResult">
        <collection property="sysApartmentList" notNullColumn="sub_apartment_id" javaType="java.util.List" resultMap="SysApartmentResult" />
    </resultMap>

    <resultMap type="SysApartment" id="SysApartmentResult">
        <result property="apartmentId"    column="sub_apartment_id"    />
        <result property="buildingId"    column="sub_building_id"    />
        <result property="apartmentName"    column="sub_apartment_name"    />
        <result property="apartmentPrice"    column="sub_apartment_price"    />
        <result property="status"    column="sub_status"    />
        <result property="createBy"    column="sub_create_by"    />
        <result property="createTime"    column="sub_create_time"    />
        <result property="updateTime"    column="sub_update_time"    />
        <result property="remark"    column="sub_remark"    />
    </resultMap>

    <sql id="selectSysBuildingVo">
        select building_id, building_name, status, create_by, create_time, update_time, remark from sys_building
    </sql>

    <select id="selectSysBuildingList" parameterType="SysBuilding" resultMap="SysBuildingResult">
        <include refid="selectSysBuildingVo"/>
        <where>  
            <if test="buildingName != null  and buildingName != ''"> and building_name like concat('%', #{buildingName}, '%')</if>
            <if test="status != null  and status != ''"> and status = #{status}</if>
        </where>
    </select>
    
    <select id="selectSysBuildingByBuildingId" parameterType="Long" resultMap="SysBuildingSysApartmentResult">
        select a.building_id, a.building_name, a.status, a.create_by, a.create_time, a.update_time, a.remark,
 b.apartment_id as sub_apartment_id, b.building_id as sub_building_id, b.apartment_name as sub_apartment_name, b.apartment_price as sub_apartment_price, b.status as sub_status, b.create_by as sub_create_by, b.create_time as sub_create_time, b.update_time as sub_update_time, b.remark as sub_remark
        from sys_building a
        left join sys_apartment b on b.building_id = a.building_id
        where a.building_id = #{buildingId}
    </select>
        
    <insert id="insertSysBuilding" parameterType="SysBuilding" useGeneratedKeys="true" keyProperty="buildingId">
        insert into sys_building
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="buildingName != null">building_name,</if>
            <if test="status != null">status,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="remark != null">remark,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="buildingName != null">#{buildingName},</if>
            <if test="status != null">#{status},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="remark != null">#{remark},</if>
         </trim>
    </insert>

    <update id="updateSysBuilding" parameterType="SysBuilding">
        update sys_building
        <trim prefix="SET" suffixOverrides=",">
            <if test="buildingName != null">building_name = #{buildingName},</if>
            <if test="status != null">status = #{status},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="remark != null">remark = #{remark},</if>
        </trim>
        where building_id = #{buildingId}
    </update>

    <delete id="deleteSysBuildingByBuildingId" parameterType="Long">
        delete from sys_building where building_id = #{buildingId}
    </delete>

    <delete id="deleteSysBuildingByBuildingIds" parameterType="String">
        delete from sys_building where building_id in 
        <foreach item="buildingId" collection="array" open="(" separator="," close=")">
            #{buildingId}
        </foreach>
    </delete>
    
    <delete id="deleteSysApartmentByBuildingIds" parameterType="String">
        delete from sys_apartment where building_id in 
        <foreach item="buildingId" collection="array" open="(" separator="," close=")">
            #{buildingId}
        </foreach>
    </delete>

    <delete id="deleteSysApartmentByBuildingId" parameterType="Long">
        delete from sys_apartment where building_id = #{buildingId}
    </delete>

    <insert id="batchSysApartment">
        insert into sys_apartment( apartment_id, building_id, apartment_name, apartment_price, status, create_by, create_time, update_time, remark) values
		<foreach item="item" index="index" collection="list" separator=",">
            ( #{item.apartmentId}, #{item.buildingId}, #{item.apartmentName}, #{item.apartmentPrice}, #{item.status}, #{item.createBy}, #{item.createTime}, #{item.updateTime}, #{item.remark})
        </foreach>
    </insert>
</mapper>